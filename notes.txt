

AWS Karpenter - Overview and Key Concepts
=========================================

Karpenter is an open-source, flexible, high-performance Kubernetes cluster autoscaler built by AWS. 
It launches and manages compute resources in response to unschedulable pods, optimizing for performance and cost.

Key Benefits
------------
        1. **Faster Provisioning**: Instantly launches EC2 instances without relying on Auto Scaling Groups (ASGs).
        2. **Cost Optimization**: Supports flexible instance types, spot instances, and bin-packing strategies.
        3. **Dynamic Scaling**: Responds to real-time demands rather than static configurations.
        4. **Simplified Node Management**: Eliminates the need to predefine node groups.

Core Components
---------------
        - **Provisioner**: Defines how and where nodes should be provisioned (e.g., limits, labels, taints).
        - **EC2NodeClass**: Specifies infrastructure-level details like instance types, AMI, security groups.
        - **Controller**: Karpenter's control loop that watches the Kubernetes API and acts accordingly.

How It Works
------------
        1. A pod becomes unschedulable due to resource constraints.
        2. Karpenter evaluates scheduling constraints (taints, topology, affinity, etc.).
        3. Karpenter uses EC2 APIs to provision the best-fitting instance(s).
        4. Node joins the cluster, pod gets scheduled.

Best Practices
--------------
        - Use `consolidation` to enable automatic node downscaling.
        - Enable `ttlSecondsAfterEmpty` to remove empty nodes after a delay.
        - Use spot capacity types for cost savings (if workload is interruptible).
        - Use well-scoped IAM roles via IRSA (IAM Roles for Service Accounts).

Key CRDs (Custom Resource Definitions)
--------------------------------------
        - `Provisioner`
        - `EC2NodeClass` or `AWSNodeTemplate`
        - `NodePool` (upcoming abstraction for multi-arch/multi-AZ management)

Common Flags/Settings
----------------------
        - `ttlSecondsAfterEmpty`: Time to wait before removing empty nodes.
        - `consolidation`: Enable to automatically optimize existing node usage.
        - `requirements`: Use to restrict zones, instance families, capacities.

Useful Links
------------
        - Official Docs: https://karpenter.sh/
        - GitHub: https://github.com/aws/karpenter
        - EKS Workshop: https://www.eksworkshop.com/beginner/085_scaling/
