######################################
IRSA Authentication and Authorization:
######################################

IRSA Flow (EKS + IAM OIDC)

1. EKS injects a projected service account token (OIDC JWT) into the pod at:
   /var/run/secrets/eks.amazonaws.com/serviceaccount/token
   This token is signed with an EKS-managed private key and is not related to the TLS certificate used by OIDC.

2. The application inside the pod uses the AWS SDK or CLI, which reads the token and attempts to call sts:AssumeRoleWithWebIdentity.

3. The SDK uses role details (via env vars like AWS_ROLE_ARN and AWS_WEB_IDENTITY_TOKEN_FILE) injected by EKS to configure the call.

4. AWS STS receives the token and uses the registered OIDC provider in IAM to:
   - Fetch the OIDC issuer’s public key.
   - Validate the JWT signature and claims (like aud, sub, exp, etc.).

5. If valid and authorized, STS returns temporary credentials (via the role’s trust policy).

6. The pod now uses these credentials to access AWS services securely.

#############################
IRSA + OpenID Connect (OIDC):
############################# 

Key Points:

    - IRSA lets EKS pods assume IAM roles using service accounts — no long-term AWS credentials needed.
    - Uses OIDC (an identity layer on top of OAuth 2.0) for token-based authentication.
    - EKS acts as an OIDC identity provider with a public endpoint.

    - AWS IAM needs:
        - The OIDC provider registered (with TLS thumbprint).
        - A role with a trust policy referencing sub = system:serviceaccount:<namespace>:<serviceaccount>.
        
    - Pods receive a JWT token signed by EKS → AWS STS verifies it → returns temporary credentials.


Benefits:

    - Secure, fine-grained IAM per pod
    - No secrets or kube2iam needed
    - Built into EKS with minimal overhead