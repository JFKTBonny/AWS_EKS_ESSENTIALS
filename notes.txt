AWS Cluster Autoscaler - Overview and Key Concepts
==================================================

Cluster Autoscaler (CA) is a Kubernetes component that automatically adjusts the size of a cluster when pods fail to launch due to insufficient resources or when nodes in the cluster are underutilized.

Key Benefits
------------
        1. **Mature and Stable**: Widely used and battle-tested in production environments.
        2. **ASG Integration**: Works with AWS Auto Scaling Groups to add/remove EC2 instances.
        3. **Safe Node Removal**: Only removes nodes that are completely empty or safely evictable.
        4. **Customizable Scaling Behavior**: Tune scale-up/down delays, utilization thresholds, and more.

How It Works
------------
        1. A pod cannot be scheduled due to resource constraints.
        2. CA detects this and identifies a suitable ASG (based on tags or configuration).
        3. A new instance is added to the ASG and joins the cluster.
        4. When nodes are underutilized and empty, CA may remove them (scale down).

Key Flags and Parameters
------------------------
        - `--scale-down-enabled=true`: Enables node scale-down.
        - `--scale-down-unneeded-time=5m`: Time before an unused node is eligible for removal.
        - `--scale-down-utilization-threshold=0.5`: Threshold below which nodes are considered underutilized.
        - `--expander=least-waste`: Chooses the node group that would waste the least resources.
        - `--node-group-auto-discovery=asg:tag=...`: Enables dynamic discovery of ASGs.

Best Practices
--------------
        - Tag ASGs correctly: `k8s.io/cluster-autoscaler/enabled` and `k8s.io/cluster-autoscaler/<CLUSTER_NAME>`
        - Ensure pods are managed by controllers (Deployments, etc.) and are evictable.
        - Avoid non-evictable pods (e.g., static pods, pods with local storage).
        - Combine with metrics server to inform scheduling decisions.
        - Use PDBs (PodDisruptionBudgets) carefully; they can block scale-down.

Limitations
-----------
        - Slower provisioning compared to Karpenter (due to ASG lifecycle delays).
        - Less efficient in heterogeneous or highly dynamic workloads.
        - Limited flexibility in choosing instance types (fixed per ASG).

Useful Links
------------
        - Official Docs: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler
        - AWS EKS Guide: https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html
        - Example Manifests: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws
