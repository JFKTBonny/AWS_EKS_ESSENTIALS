- create an AWS ECR registry:
    aws ecr create-repository \
        --repository-name docker-images \
        --region us-east-1 \
        --tags '[{"Key":"env","Value":"test"},{"Key":"team","Value":"DevOps"}]'

-  log in to ECR registry: 
     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
*** aws ecr get-login-password --region us-east-1 is piped to the docker login so that you can use docker commands to administer the ECR...***

- Build the blueapp image for the ECR:
    docker build -t 163447728448.dkr.ecr.us-east-1.amazonaws.com/docker-images:blueapp .

- Push the image to ECR:
     docker push 163447728448.dkr.ecr.us-east-1.amazonaws.com/docker-images:blueapp


The previous command create and ecr registry, build a docker image and push it in that ecr...
In order to use that stored image in our app running within and eks cluster,we should:
              - grant accsess to eks to pull and run the image...
              - an IAM or sa policy is used to grant that permission
              - ECR access will be granted to workers nodes to enable them to pull and run the image from the private ECR...
              
    example of terraform config files that enables workers to access ECR to pull and run an image:

            resource "aws_iam_role_policy_attachment" "amazon_ec2_container_registry_read_only" {
                policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
                role       = aws_iam_role.nodes_role.name
            }           

