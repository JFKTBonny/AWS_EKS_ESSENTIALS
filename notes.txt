Recently AWS relied on aws-auth configmap access control to authorize administrative access to EKS cluster...
The authentication in aws-auth ConfigMap  occurs in AWS IAM,while authorization takes place in k8s...

This  requires clusters administrators to switch between AWS IAM and K8s APIs to configure files when managing 
multiple cluster operators...

The switching and editing of configurations make the access control method complicated and error prone especially when 
you have many operators...

AWS has since deprecated the aws-auth ConfigMap access control method and replaced it with the new cluster access control
method...

however, the aws-auth configmap method remains the default access control mmethod in EKS...

Both authentication and authorization occur at one place: in the AWS IAM...

The aws-auth ConfigMap access control involves 2 differents services: the AWS IAM and the K8S RBAC services...

Aws-auth  cm implements RBAC for cluster administrators...

Aws-auth ConfigMap enables or denies cluster access for IAM principals...

### EKS assigns the IAM principal that created the cluster, the ""system:masters(the super admin)"" RBAC group...
    The principals in this group have unrestricted access to the cluster...
    The cluster creator's membership in the group is not visible in the kubeconfig file...
    Consequently, you can not revoke the cluster creator's access by editing the aws-auth configmap configuration...
    aws-auth cm can be edited to add  new cluster administrators...###

# Auth using kubeconfig file:
       aws eks update-kubeconfig --name <cluster_name>

# fetch info about the user:
        kubectl auth whoami

# read the kubeconfig configuration:
       kubectl config view 
       kubectl config view -o template --template='{{ index."current-context"}} ' 

# edit the aws-auth ConfigMap:
       kubectl edit cm aws-auth -n kube-system    

# Retrieve the available roles:
       kubectl get clusterroles  or
       kubectl get clusterroles | grep -v '^system'  

################### Mapping of K8s  RBAC groups to EKS roles ############################################

K8s Groups                  EKS Roles                            Privileges

system:masters            cluster-adminCluster-wide              super admin
admin                     Admin                              Full  access within a namespace
edit                      edit                               Perform basic actions like deploying pods,
                                                             viewing and observing nonsensitive objects
                                                             within a given namespace
view                       view                               Read-only within a namespace
