                             ##########
                             KUBERNETES:
                             ##########
    K8s is a container orchrestration tool...
    It automates de deployment,scaling and management of containerized applications...

                          **************************
                          Key Benefits of Kubernetes:
                          **************************
        - Efficiency: Optimizes hardware,system,and applications resources usage...
        - Reliability: Minimizes downtime ensuring that applications services are always availables...
        - Portability: Runs diverse workload and on various platforms,including stateless,stateful and data processing workloads...
        - Flexibility: Runs on various platforms,from physical machines to cloud infrastructure...
        - Security: Provides robust security features including secure communication between various services...
        - Auto-healing: Enables automated recovery from failures...
        - Scalability:  Can scale apps horizontally(up and down) and vertically(in and out)...
        - Extensibility: You can add more features to a K8s cluster without impacting the already present apps...
        - Support for batch executions: Supports batch and cron jobs execution...
        - Rollbacks and Rollouts: You can choose to rollback and rollout your apps in stages before prod...
        - Storage and config management: Provides the capability to use various storage solutions(SSD,HDD,AWS S3 ...etc)...
        - open-source community: Benefits from a large community of developers and users who contribute to its continuous improvement...

K8S MAIN COMPONENTS: Control Plane and data plane(Worker Nodes)...
Control Plane components:
    - API SERVER: is the cluster gateway,the communication hub for all internal and external interactions within the k8s cluster...
    - ETCD: is a distributed keys values databases that stores cluster info,including manifests,metadata,and state information...
      It stores every user object under a key with the name /registry/object/namespace/object-name...
      eg. for blueapp-pod object, etcd stores its info with the key: /registry/pods/default/blueapp-pod...
    - Scheduler: is responsible to assign pods to nodes based on:
                                                       1- resource availability
                                                       2- policy costraints
                                                       3- affinity and anti-affinity....etc   
    - Controller manager: orchestrates the various objects specific controllers to maintain the cluster's desired state...
                          For example: 
                                 - the node controller monitors the health of nodes and notifies if nodes return availables...
                                 - Replicat controller ensures that the actual number of pod replicas matches the desired count specified for the cluster...
                                 These controllers work collaboratively under the coordination of the controller manager to ensure stability and resilience of the cluster...

                          To notice several controllers,run the command: "" kubectl get  sa -n  kube-system"" or ""kubectl get --raw='/readyz?verbose'""...

worker nodes components:
    - Kubelet: maintains the desired state of containers(manages the lifecycle of containers within apps pods)...
               is a daemonset that runs on every nodes of the data plane...
               It communicates with the underlying container runtime(docker,containerd,podman,windows container) to start a container
               and ensure that their desired state is maintened...
    - Kube-proxy: is a distributed network router that runs on every node...
                  Its main function is to route inbound traffic to a service endpoint of an app...
                  It manages networking in worker nodes...
    - Addon: are auxiliaries components used to extend the capabilities of the cluster...
             Addons provide functionality such as :
                         - monitoring
                         - logging
                         - networking
                         - security enhancements...
             They can be found in both control and data plane:
                          1- CoreDNS for instance in control plane...
                          2- network plugin(calico, flannel) in data plane...

To fetch the cluster status: "" kubectl get cs OR   kubectl get componentstatus ""
To find Controllers:  ""  kubectl get sa -n kube-system "" 
To collect cluster info and store it in a file named "clusterinfo.dump:  "" kubectl cluster-info dump > clusterinfo.dump ""...
To fetch info about kubelet from dump: "" kubectl describe nodes "" 
To dump Performance metrics info: "" kubectl get --raw /metrics >metrics ""
















