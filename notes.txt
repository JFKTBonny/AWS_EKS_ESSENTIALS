############
Pod Identity:
############

 The EKS Pod Identity is a simplified version of the IRSA method...
 Pod Identity - What to Know (AWS EKS)

1. Purpose:
   - Allows Kubernetes pods to securely access AWS services without needing to manage AWS credentials.

2. Key Concepts:
   - Service Account: Each pod runs with one; it's its identity in Kubernetes.
   - IAM Role: An AWS identity with policies that define permissions.
   - Pod Identity Association: Binds a service account to an IAM role.
   - EKS Pod Identity Agent: Addon that handles credential delivery to pods.

3. Workflow:
   a. Create a Kubernetes service account.
   b. Create an IAM role with proper policies.
   c. Create a Pod Identity Association (link SA to IAM role).
   d. Deploy pod using the service account.
   e. EKS Pod Identity Agent fetches temporary credentials.

4. Benefits:
   - No need to manage long-lived AWS credentials.
   - Fine-grained access control per workload.
   - IAM auditing and least privilege best practices.

5. Tools Involved:
   - Terraform or AWS CLI for setup.
   - EKS console or kubectl for Kubernetes resources.

6. Notes:
   - Requires the "eks-pod-identity-agent" addon.
   - Works only in EKS with version 1.24+.
   - Replaces older IRSA (IAM Roles for Service Accounts) in many cases.