                                #############
                                Load Balancer:
                                #############

We use Load Balancer for an industry-grade  external access to cluster applications...
Local proxies and port forwarding can only sustain testing in developement area...
User experience ,enhanced security , and service availability are improved drastically with LB...
*** LB is a better way of exposing pods to the outside world than port forwarding tunnel or NodePort services...
    End users access a pod by sending a request to a LB...
    LB forward the request to a cluster service object...
    The service object pushes the request to the container running inside the pod...

**** 4 types of ELBs(elastc load balancers) are:
                        - classic
                        - network
                        - gateway
                        - application load balancers
      The choice of the load balander depends on the application needs:
         - AWS recommends:
                1- ALB for flexible app management
                2- NLB for an extreme performance app, and apps that mandate static IP addresses...
**** while ELBs have many targets ,the only targets for Classic Load Balancer is EC2 instances...
     CLB can only route traffic to workloads running within EC2 instances...

**** ALB is useful when you want to inspect traffic,route traffic-based HTTP/HTTPS path, header.or method...
     It gives you more control over routing, using different paths to distribute the workloads over pods... 

                            ############################
                            LOAD BALANCERS DEPLOYMEMNTS:
                            ############################


              1- Classic Load balancer:
        For Classic Load Balancer we just have to set the pod service type to ""LoadBalancer"""

              2- Network Load Balancer:
        For NLB we have to configure the pod annotation in order to tell EKS which LB should be deployed... 
        Example pod annotations in this case:
                   annotations: 
                        service.beta.kubernetes.io/aws-load-balancer-type: external
                        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
                        service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

               3- Application Load Balancer:
        we can not deploy an ALB with only pod annotations because the ALB is a custom object in EKS...
        K8s/EKS native objects are managed by controllers that maintain their desired states...
        Controllers for standard or native objects are bootstrapped with the cluster and there is no need to 
        install additional controllers...
        ALB is not a standard resource or object in K8s/EKS(it has no bootstrapped controller)...
        ALB should rely to a custom """AWS ALB ingress controller""" to route traffic to applications...

    [    An ingress controller is a resource that manages external or internal HTTP(s) access to a service within a cluster...
         It routes HTTP and HTTPS traffic through a single entrypoint to different services inside a cluster...
         The entrypoint is backed by ingress rules which determine the destination of an incomming traffic...  ] 

    [    An ingress controller connects ALB to K8s services to decouple the ingress controller from the k8s services...
         It enables a single ingress to serve to serve multiple services... ]           

**** REQUISITES FOR ALB:
          . Use the latest controller version
          . Configure the AWS identity and Access management (IAM) OpenID Connect(OIDC) provider for the cluster...
          . You should installthe Amazon VPC CNI plugin for k8s,kube-proxy,and CoreDNS add-ons...
          . You should tag subnets appropriately...
          . You should set the hop limit to at leat 2 depending on the method used to deploy the lb controller...


