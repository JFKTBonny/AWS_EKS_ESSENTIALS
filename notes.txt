####
PODS:
####

K8s objects are entities that can persist in a k8s Cluster...
A file is referred as an ogject manifest or specification file...
Pods wrap applications(containers) to make them suitable for k8s to manage...
Pods are the smallest deployable units that can be created and managed by k8s...
Mandatory parameters of a pod are:
                       - apiVersion: the compatible k8s API version for pod[3 API versions are: Alpha,Beta,and Stable]...
                       - kind:       the type of object k8s should create on a node[example: Pod,Deployment,Secrets...etc]...  
                       - metadata:   identifies and describes an object[example: name,labels,namespace and annotation]...
                       - spec:       specifies the container for a podand declares the desired state and object characteristics...

 Name: is also known as pod ID,a pod's unique identifier within a namespace...
 Namespace: is a container for isolating and controlling access to resources within a cluster...
    Namespaces can be used to grant access to different teams in an ORG to work on separate Projects in the same cluster...
    ORG can use namespaces to sandbox DEV and TESTING ENVs from the PROD ENV such that PROD codes is not affected by changes
    made to codes in the DEV or TESTING namespaces...

**** Cluster admin can set policy-driven resource limits on namespaces by defining resource quotas for CPU or memory utilization,
     insuring that every project or namespace has the resources it needs to run and no one namespace can consume all available resources...

**** K8s can not isolate resources  such as nodes,Storage Class,and PV within a namespace...

**** A resource is an API endpoint that represents a cluster object...
      examples:
        - /api/v1/Pods
        - /api/v1/pods/{pod_name}
        - /api/v1/deployment/{deployment_name}
    A resource can be unique within a namespace but not accross namespaces...
**** K8S create 4 initial namespaces:
                     - default:
                     - kube-node-lease: holds  Lease objects associated with each node...Node leases allow kubelet to send 
                         heartbeats so that the control plane can detect node failure...
                     - kube-system: reserved for k8s system objects such as daemonsets...
                     -kube-public: is readable by all clients,authenticated or not...

**** A service account: grants a pod permission to interact with services such as S3 bucket...
     Service account is created for service ,not for end users or human beings...
     Service account is used to identify and authenticate cluster object,pods,system components,and entities inside 
     and outside the cluster, including API server... 

**** Labels: are key/value pair identifiers you can attach to k8s object to make your spec meaningful and relevant for  users...
             can be used to organize objects into groups to allow users to write efficient search queries to find and apply changes to them...

**** Annotaions: are only for info purposes...
                they are useful when you want to integrate with external tools or services[For example,intergration with a LB or CI/CD pipeline]...
                Annotations can integrate AWS LB with your app for end users to interact with them...

**** Status: are properties that show the state of Pod...
             They are :
                    - Pending: the pod is waiting to get scheduled on a node or for at least one of its containers to initialize...
                    - Running: the pod has been assigned to a node and has one or more running containers...
                    - Succeeded: all the pod's containers  exited without errors... 
                    - Failed: one or more of the pod's containers terminated with an error...
                    - Unknown: usually occurs when the k8s API server can not communicate with pod's node...                                                
                    
****QoS(quality of service): is used by k8s to decide which pods to evict from nodes and which ones are experiencing resource pressure...
                             The 3 QoS classes are: - guaranteed
                                                    - burstable: are second to be evicted after best effort pods...
                                                    - best effort: best effort pods are evicted first...
                             For resource pressure ,only pods exceeding resource requests are candidates fro eviction...

**** Node Selectors: assigns labels to nodes such that the k8s scheduler can deploy pods on a specific node...

**** Tolerations: work together with taint to place a pod on a node...
                  Tolerations allow pods with certain marking to run on a tainted node...
                  k8s automatically adds a toleration with ""node.kubernetes.io/not-ready"" and ""node.kubernetes.io/unreachable"" keys
                  by default to nodes and set their durations to only 300 seconds...

     You apply taint to nodes and toleration to pods...
     Each taint consist of 3 parts:
            - key: Unique identifier for the taint...
            - value: AN optional value associated with the taint key...
            - effect: indicates how the taint affects pod scheduling...
                      The effect of a taint has 3 values:
                            1- NoSchedule:    Prevents new pods from being scheduled...
                            2- PreferNoSchedule: Avoid placing new pods on a tainted node unless necessary...
                            3- NoExecute: Evicts or removes existing pods that do not tolerate the taint... 
                  
**** Events: record pod activities... 
              kubectl events:                        list events in default namespace...
              kubectl events --all-namespaces:       list events in all namespaces...  
              kubectl events --for pod/blueapp-pod:  list events for a specific pod... 
              kubectl events --types=Warning,Normal: list events of type warning or normal...               