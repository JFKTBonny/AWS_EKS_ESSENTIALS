# Defines the EC2NodeClass which contains infrastructure-level details for provisioning EC2 instances
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  # Selects the latest Bottlerocket AMI for the nodes
  amiSelectorTerms:
    - alias: bottlerocket@latest

  # IAM role used by EC2 instances created by Karpenter for this node class
  role: KarpenterNodeRole-karpenter-cluster

  # Specifies which subnets to use, based on tags
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: karpenter-cluster

  # Specifies which security groups to attach to the instances, based on tags
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: karpenter-cluster

  # Additional tags applied to EC2 instances for discovery and grouping
  tags:
    karpenter.sh/discovery: karpenter-cluster
---
# Defines the NodePool, which controls how Karpenter provisions and manages compute capacity
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      # Refers to the EC2NodeClass defined above
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default

      # Constraints for instance selection (e.g., instance category, CPU, generation, etc.)
      requirements:
        - key: "karpenter.k8s.aws/instance-category"
          operator: In
          values: ["t", "c", "m", "r"]  # Select t*, c*, m*, r* instance families
        - key: "karpenter.k8s.aws/instance-cpu"
          operator: In
          values: ["2", "4", "8", "16", "32"]  # Accept instance types with these vCPUs
        - key: "karpenter.k8s.aws/instance-hypervisor"
          operator: In
          values: ["nitro"]  # Use only Nitro-based instances
        - key: "karpenter.k8s.aws/instance-generation"
          operator: Gt
          values: ["2"]  # Prefer instance generations greater than 2

  # Upper limit on total CPU provisioned by this NodePool (across all nodes)
  limits:
    cpu: 1000

  # Disruption policy for scale-down/consolidation
  disruption:
    consolidationPolicy: WhenEmpty  # Only consolidate when nodes are empty
    consolidateAfter: 30s           # Wait 30 seconds before attempting to consolidate
